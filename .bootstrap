#!/bin/zsh

if curl -V &> /dev/null; then 
    _dlcmd="curl -fsSL"
elif wget -V &> /dev/null; then
    _dlcmd="wget -qO -"
fi

if [[ "$(uname -s)" == "Darwin" ]]; then
    _n_cores=$(sysctl -n hw.logicalcpu)
else
    _n_cores=$(nproc)
fi

bootstrap::get_micro () (
    echo "Installing micro to ${HOME}/.local/bin ..."
    if ! [[ -z "${_dlcmd}" ]]; then
        _installer="https://getmic.ro"
        (
            mkdir -p "${HOME}/.local/bin/" &&
            cd "${HOME}/.local/bin/" &&
            sh <(eval "${_dlcmd} ${_installer}")
        ) &>/dev/null || echo "Unable to install micro"
    else
        echo "No download method available"
    fi
)

bootstrap::get_starship () (
    echo "Installing starship to ${HOME}/.local/bin ..."
    if ! [[ -z "${_dlcmd}" ]]; then
        _installer="https://starship.rs/install.sh"
        (
            mkdir -p "${HOME}/.local/bin/" &&
            sh <(eval "${_dlcmd} ${_installer}") --bin-dir "${HOME}/.local/bin" --yes
        ) &>/dev/null || echo "Unable to install starship"
    else
        echo "No download method available"
    fi
)

bootstrap::get_fzf () (
    echo "Installing fzf to ${HOME}/.fzf ..."
    if ! [[ -z "${_dlcmd}" ]]; then
        _release="https://github.com/junegunn/fzf/archive/refs/tags/0.31.0.tar.gz"
        (
            mkdir -p "${HOME}/.fzf" &&
            tar -xzf <(eval "${_dlcmd} ${_release}") --exclude "src" --strip 1 -C "${HOME}/.fzf" &&
            ${HOME}/.fzf/install --all --no-update-rc &&
            ln -sf "${HOME}/.fzf/bin/fzf" "${HOME}/.local/bin/fzf" 
        ) || echo "Unable to install fzf"
    else
        echo "No download method available"
    fi
)

bootstrap::get_omz () (
    echo "Installing oh-my-zsh ..."
    if ! [[ -z "${_dlcmd}" ]]; then
        _installer="https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh"
        (
           sh <(eval "${_dlcmd} ${_installer}") --unattended --keep-zshrc --skip-chsh
        ) || echo "Unable to install oh-my-zsh"
    else
        echo "No download method available"
    fi
)

bootstrap::get_homebrew () (
    echo "Installing homebrew ..."
    if ! [[ -z "${_dlcmd}" ]]; then
        _installer="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"
        (
           bash <(eval "${_dlcmd} ${_installer}")
        ) || echo "Unable to install homebrew"
    else
        echo "No download method available"
    fi
)

bootstrap::get_mpv () (
    echo "Installing mpv ..."
        if ! [[ -z "${_dlcmd}" ]]; then
            _mpv_release="https://github.com/mpv-player/mpv/archive/refs/tags/v0.34.1.tar.gz"
            _libsixel_release="https://github.com/saitoha/libsixel/releases/download/v1.8.6/libsixel-1.8.6.tar.gz"
            _tmpdir=$(mktemp -d)
            _build_libs="${_tmpdir}/build-libs"
            _pkgconfig="${_build_libs}/lib/pkgconfig"
            (   
                export PKG_CONFIG_PATH="${_pkgconfig}:${PKG_CONFIG_PATH}" 

                mkdir -p "${_tmpdir}/libsixel" &&
                mkdir -p "${HOME}/.local/bin" &&
                (
                    tar -xzf <(eval "${_dlcmd} ${_mpv_release}") --strip 1 -C "${_tmpdir}" &
                    tar -xzf <(eval "${_dlcmd} ${_libsixel_release}") --strip 1 -C "${_tmpdir}/libsixel"
                ) &&
                cd "${_tmpdir}/libsixel" &&
                ./configure --enable-static=yes --enable-shared=no --with-libcurl=no &&
                make -j ${_n_cores} &&
                make prefix="${_build_libs}" install &&
                sed -i -E "s,^prefix=.*,prefix=$_build_libs," "${_pkgconfig}/libsixel.pc" &&
                cd "${_tmpdir}" &&
                ./bootstrap.py &&
                ./waf configure --enable-sixel --prefix="${HOME}/.local" &&
                ./waf build --jobs ${_n_cores} &&
                ./waf install
            ) &> /dev/null || echo "Unable to install mpv"
            /bin/rm -r "$_tmpdir"
        else
            echo "No download method available"
        fi
)

bootstrap::get_yt_dlp () (
    echo "Installing yt-dlp to ${HOME}/.local/bin ..."
    if ! [[ -z "${_dlcmd}" ]]; then
        _release="https://github.com/yt-dlp/yt-dlp/releases/download/2022.07.18/yt-dlp"
        (
            mkdir -p "${HOME}/.local/bin/" &&
            eval "${_dlcmd} ${_release} -o ${HOME}/.local/bin/yt-dlp" &&
            chmod +x "$HOME/.local/bin/yt-dlp"
        ) &>/dev/null || echo "Unable to install yt-dlp"
    else
        echo "No download method available"
    fi
)

bootstrap::get_ytfzf () (
    echo "Installing ytfzf ..."
    if ! [[ -z "${_dlcmd}" ]]; then
        _release="https://github.com/pystardust/ytfzf/archive/refs/tags/v2.4.1.tar.gz"
        _tmpdir=$(mktemp -d)
        (
            mkdir -p "${HOME}/.local/bin" &&
            tar -xzf <(eval "${_dlcmd} ${_release}") --strip 1 -C "$_tmpdir" &&
            cd "$_tmpdir" &&
            make PREFIX="$HOME/.local" install
        ) || echo "Unable to install ytfzf"
        /bin/rm -r "$_tmpdir"
    else
        echo "No download method available"
    fi
)
